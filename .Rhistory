?pdflatex
??pdalatex
??pdflatex
library(datasets)
library("datasets")
library(datasets)
library("datasets", lib.loc="C:/Program Files/R/R-3.1.1/library")
tooth.dat <- data(ToothGrowth)
tooth.dat <- ToothGrowth
View(ToothGrowth)
library(lattice)
str(tooth.dat)
xyplot(len~dose|supp,data = tooth.dat)
xyplot(len~dose|supp,data = tooth.dat, ylab="Response (length of odontoblasts)")
xyplot(len~dose|supp,data = tooth.dat, ylab="Response (length of odontoblasts)",xlab="Dose of Vitamin C (mg)")
View(ToothGrowth)
summary(tooth.dat)
xyplot(len~dose|supp,data = tooth.dat, ylab="Response (length of odontoblasts)",xlab="Dose of Vitamin C (mg)", main = "Vitamin C Delivery: Orange Juice and Ascorbic Acid")
xyplot(len~dose|supp,data = tooth.dat, ylab="Response (length of odontoblasts)",xlab="Dose of Vitamin C (mg)", main = "Vitamin C Delivery: Orange Juice (OJ) V. Ascorbic Acid (VC)")
xyplot(len~dose|supp,data = tooth.dat, ylab="Response (length of odontoblasts)",xlab="Dose of Vitamin C (mg)", main = "Vitamin C Delivery: Orange Juice (OJ) Vs. Ascorbic Acid (VC)")
t.test(len~dose|supp)
t.test(len~dose|supp,data=tooth.dat)
t.test(len~dose+supp,data=tooth.dat)
t.test(len~dose*supp,data=tooth.dat)
t.test(len~supp,data=tooth.dat)
t.test(len~dose,data=tooth.dat)
tooth.dat$dose <- as.factor(tooth.dat$dose)
t.test(len~dose,data=tooth.dat)
t.test(len~supp,data=tooth.dat)
tooth.dat.5 <- tooth.dat[tooth.dat$dose==0.5,]
View(tooth.dat.5)
t.test(len~supp,data=tooth.dat.5)
tooth.dat1 <- tooth.dat[tooth.dat$dose==1.0,]
t.test(len~supp,data=tooth.dat.5,paired = FALSE, var.equal = FALSE)
t.test(len~supp,data=tooth.dat1,paired = FALSE, var.equal = FALSE)
tooth.dat2 <- tooth.dat[tooth.dat$dose==2.0,]
t.test(len~supp,data=tooth.dat2,paired = FALSE, var.equal = FALSE)
power.t.test(10)
power.t.test(n=10,delta=5,sig.level = .95,alternative = two-sided test)
shapiro.test(x = tooth.dat$len)
shapiro.test(x = tooth.dat$len[tooth.dat$dose==.5])
shapiro.test(x = tooth.dat$len[tooth.dat$dose==1.0])
shapiro.test(x = tooth.dat$len[tooth.dat$dose==2.0])
reg <- lm(mpg~.,data=mtcars)
summary(reg)
?step
step(reg,direction="both")
s <- step(reg,direction="both")
summary(s)
install.packages("spj.lm")
library("rmarkdown", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("knitr", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("lattice", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("markdown", lib.loc="C:/Program Files/R/R-3.1.1/library")
pairs(mtcars,diag.panel=panel.hist,panel=panel.smooth)
library("MASS", lib.loc="C:/Program Files/R/R-3.1.1/library")
pairs(mtcars,diag.panel=panel.hist,panel=panel.smooth)
pairs(mtcars)
pairs(s)
str(s)
s$model
pairs(s$model)
?mtcars
pairs(s$model)
plot(s)
library("boot", lib.loc="C:/Program Files/R/R-3.1.1/library")
glm.diag.plots(reg)
plot.lm(reg)
library("stats", lib.loc="C:/Program Files/R/R-3.1.1/library")
plot.lm(reg)
ncvTest(reg)
vif(reg)
install.packages("car")
library("car", lib.loc="C:/Program Files/R/R-3.1.1/library")
vif(reg)
sqrt(vif(reg))
hist(sqrt(vif(reg)))
leveragePlots(reg)
ncvTest.lm(reg)
ncvTest(reg)
ncvTest(s)
qqplot(s)
qqplot(reg)
qqplot(s$model)
plot(s)
s <- step(reg,direction = "backward",na.omit=TRUE)
final.reg <- lm(mpg~am+cyl+disp+hp+qsec,data=mtcars)
summary(final.reg)
final.reg <- lm(mpg~am+cyl+disp+hp,data=mtcars)
summary(final.reg)
final.reg <- lm(mpg~am+cyl+disp+hp+wt,data=mtcars)
summary(final.reg)
final.reg <- lm(mpg~am+cyl+disp+hp+wt+qsec,data=mtcars)
summary(final.reg)
cor(mtcars)
final.reg <- lm(mpg~am+hp+wt,data=mtcars)
summary(final.reg)
final.reg <- lm(mpg~am+cyl+wt,data=mtcars)
summary(final.reg)
final.reg <- lm(mpg~am+qsec+wt,data=mtcars)
summary(final.reg)
cor(mtcars)
?corr
corr(mtcars)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library("assertthat", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("AppliedPredictiveModeling", lib.loc="C:/Program Files/R/R-3.1.1/library")
library(caret)
install.packages("caret")
library(caret)
install.packages("caret")
library("AppliedPredictiveModeling", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
install.packages("caretEnsemble")
library("caretEnsemble", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages("caret")
data(concrete)
hist(concrete$Superplasticizer)
hist(concrete$Superplasticizer)
summary(concrete)
hist(log(concrete$Superplasticizer +1))
runApp("app1", display.mode = "showcase")
setwd("C:/Users/PDAUSER/Desktop/Data Products")
library(shiny)
library(ggplot2)
library(dplyr)
runApp("app1", display.mode = "showcase")
dat <- read.csv("dat.csv")
runApp("app1", display.mode = "showcase")
library(lubridate)
# Committees #
com <- read.csv("Committee.csv")
# Member info #
mem <- read.csv("Member.csv", stringsAsFactors = FALSE)
mem$Primary.Function <- as.factor(mem$Primary.Function)
mem$Is.Member <- as.factor(mem$Is.Member)
mem$Email <- as.factor(mem$Email)
mem$Preferred.Country <- as.factor(mem$Preferred.Country)
mem$Assigned.Chapter <- as.factor(mem$Assigned.Chapter)
mem$Member.Type <- as.factor(mem$Member.Type)
mem$Join.Date <- as.Date(mem$Join.Date, format = "%m/%d/%Y")
mem$Membership.Duration <- as.numeric(ifelse(mem$Is.Member==TRUE,(today() - mem$Join.Date)/365,""),na.rm=TRUE)
# Orders #
ord <- read.csv("Order.csv")
ordMatrix <- model.matrix(~ Product.Category, data = ord)
ord$Product.Category <- NULL
ord <- cbind(ord,ordMatrix)
ordMatrix <- NULL
ord$Bill.To.ID <- as.factor(ord$Bill.To.ID)
ordagg <- t(sapply(by(ord[,2:ncol(ord)], ord$Bill.To.ID, colSums), identity))
ordagg <- as.data.frame(ordagg)
ordagg$Bill.To.ID <- as.factor(rownames(ordagg))
names(x = ordagg)[2] <- "Total.Orders"
ord <- ordagg
ordagg <- NULL
# Merge the tables #
memcom <- merge(x = com,
y = mem,
by.x = "Person.ID",
by.y = "ID",
all = TRUE
)
dat <- merge(x = memcom,
y = ord,
by.x = "Person.ID",
by.y = "Bill.To.ID",
all = TRUE
)
com <- NULL
mem <- NULL
ord <- NULL
memcom <- NULL
names(dat) <- gsub("Product.Category","",names(dat))
topcat <- sapply(dat[,13:72],sum,na.rm=TRUE)>1000
dat <- dat[,c(rep(TRUE, 12),names(dat[,13:72]) %in% names(topcat[topcat==TRUE]))]
dat$Person.ID <- NULL
EU <- c("Austria", "Belgium", "Bulgaria", "Croatia", "Czech Republic", "Cyprus", "Denmark", "Estonia", "Finland", "France", "Germany", "Greece", "Hungary", "Ireland", "Italy", "Kosovo", "Latvia", "Lithuania", "Luxembourg", "Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "United Kingdom")
dat$EU <- dat$Preferred.Country %in% EU
dat$EU <- as.factor(dat$EU)
levels(dat$EU) <- c("Non-EU", "EU")
levels(dat$Email) <- c("Email Allowed","Email Exclude")
write.csv(dat, "dat.csv")
levels(dat$Is.Member)
levels(dat$Is.Member) <- c("Non-Member", "Member")
write.csv(dat, "dat.csv")
runApp("app1", display.mode = "showcase")
names(dat)
gsub(" ", "_",names(dat))
names(dat) <- gsub(" ", "_",names(dat))
names(dat) <- gsub(":","",names(dat))
names(dat)
names(dat) <- gsub(":|/","",names(dat))
names(dat)
write.csv(dat, "dat.csv")
runApp("app1", display.mode = "showcase")
runApp("app1", display.mode = "showcase")
head(year(dat$Join.Date))
head(year(dat$Join.Date),100)
head(year(dat$Join.Date)>2011,100)
dat$2011orGreater <- as.factor(year(dat$Join.Date)>=2011)
dat$Greater2011 <- as.factor(year(dat$Join.Date)>=2011)
View(dat)
levels(dat$Greater2011) <- ("LessThan2011","Greaterthan2011")
levels(dat$Greater2011) <- c("LessThan2011","Greaterthan2011")
write.csv(dat, "dat.csv")
runApp("app1", display.mode = "showcase")
